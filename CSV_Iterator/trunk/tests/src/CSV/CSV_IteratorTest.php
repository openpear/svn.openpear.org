<?php
ini_set("include_path", "../src/CSV".PATH_SEPARATOR."../../../src/CSV".PATH_SEPARATOR.ini_get("include_path"));
require_once 'PHPUnit/Framework.php';

require_once 'Iterator.php';

/**
 * Test class for CSV_Iterator.
 * Generated by PHPUnit on 2009-07-31 at 18:25:12.
 */
class CSV_IteratorTest extends PHPUnit_Framework_TestCase
{
/**
 * Tears down the fixture, for example, closes a network connection.
 * This method is called after a test is executed.
 *
 * @access protected
 */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testRewind().
     */
    public function testRewind() {
    // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testNext().
     */
    public function testNext() {
    // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCurrent().
     */
    public function testCurrent() {
    // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testKey().
     */
    public function testKey() {
    // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testValid().
     */
    public function testValid() {
    // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetRowLength().
     */
    public function testSetRowLength() {
    // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @dataProvider foreachData
     */
    public function testForeach($file, $encoding, $expected)
    {
        reset($expected);
        foreach (new CSV_Iterator(realpath(dirname(__FILE__) . '/../../fixtures/' . $file), $encoding) AS $key=>$row) {
            $this->assertEquals(current($expected), $row, 'at ' . $key);
            next($expected);
        }
    }

    public function foreachData()
    {
        return array(
            array('withHeader.csv', 'utf-8', array(
                    array('header1'=>'1-1', 'header 2'=>'1-2', 'header3'=>'1-3'),
                    array('header1'=>'2 1', 'header 2'=>'2 2', 'header3'=>'2 3'),
                    array('header1'=>'3
1', 'header 2'=>'
3

2
', 'header3'=>'
3 3'),
                )),
            array('withHeader.ja.utf-8.csv', 'utf-8', array(
                    array("あいうえお"=>'一の一',"漢字ヘッダ"=>'一の弐',"漢字　ヘッダ"=>'壱の参'),
                    array("あいうえお"=>'弐 壱',"漢字ヘッダ"=>'弐 弐',"漢字　ヘッダ"=>'弐 参'),
                ))
        );
    }
}
?>
