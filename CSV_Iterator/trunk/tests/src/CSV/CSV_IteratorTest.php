<?php
ini_set("include_path", "../src/CSV".PATH_SEPARATOR."../../../src/CSV".PATH_SEPARATOR.ini_get("include_path"));
require_once 'PHPUnit/Framework.php';

require_once 'Iterator.php';

/**
 * Test class for CSV_Iterator.
 * Generated by PHPUnit on 2009-07-31 at 18:25:12.
 */
class CSV_IteratorTest extends PHPUnit_Framework_TestCase
{
/**
 * Tears down the fixture, for example, closes a network connection.
 * This method is called after a test is executed.
 *
 * @access protected
 */
    protected function tearDown()
    {
    }

    /**
     * @dataProvider constructData
     */
    public function testRewind($file, $encoding, $delimiter, $enclosure, $expected) {
        $obj = new CSV_Iterator(realpath(dirname(__FILE__) . '/../../fixtures/' . $file), $encoding, $delimiter, $enclosure);
        $obj->rewind();
        $this->assertEquals(current($expected), $obj->current());
    }

    /**
     * @dataProvider constructData
     */
    public function testCurrent($file, $encoding, $delimiter, $enclosure, $expected) {
        $obj = new CSV_Iterator(realpath(dirname(__FILE__) . '/../../fixtures/' . $file), $encoding, $delimiter, $enclosure);
        $this->assertEquals(current($expected), $obj->current());
    }

    /**
     * @todo Implement testSetRowLength().
     */
    public function testSetRowLength() {
    // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @dataProvider constructData
     */
    public function testForeach($file, $encoding, $delimiter, $enclosure, $expected)
    {
        reset($expected);
        $count = 0;
        foreach (new CSV_Iterator(realpath(dirname(__FILE__) . '/../../fixtures/' . $file), $encoding, $delimiter, $enclosure) AS $key=>$row) {
            $this->assertEquals(current($expected), $row, 'at ' . $key);
            next($expected);
            $count++;
        }
        $this->assertEquals(count($expected), $count, 'does not loop all.');
    }

    public function constructData()
    {
        return array(
            array('withHeader.csv', 'utf-8', ',', '"', array(
                    array('header1'=>'1-1', 'header 2'=>'1-2', 'header3'=>'1-3'),
                    array('header1'=>'2 1', 'header 2'=>'2 2', 'header3'=>'2 3'),
                    array('header1'=>'3
1', 'header 2'=>'
3

2
', 'header3'=>'
3 3'),
                )),
            array('withHeader.ja.utf-8.csv', 'utf-8', ',', '"', array(
                    array("あいうえお"=>'一の一',"漢字ヘッダ"=>'一の弐',"漢字　ヘッダ"=>'壱の参'),
                    array("あいうえお"=>'弐 壱',"漢字ヘッダ"=>'弐 弐',"漢字　ヘッダ"=>'弐 参'),
                )),
             array('withHeader.ja.shift_jis.csv', 'shift_jis', ',', '"', array(
                    array("あいうえお"=>'一の一',"漢字ヘッダ"=>'一の弐',"漢字　ヘッダ"=>'壱の参'),
                    array("あいうえお"=>'弐 壱',"漢字ヘッダ"=>'弐 弐',"漢字　ヘッダ"=>'弐 参'),
                )),
             array('enclosureWithHeader.ja.shift_jis.csv', 'shift_jis', ',', '@', array(
                    array("あいうえお"=>'一の一',"漢字ヘッダ"=>'一の弐',"漢字　ヘッダ"=>'ァゼソゾタダチボポマミ'),
                    array("あいうえお"=>'弐 壱',"漢字ヘッダ"=>'弐 弐',"漢字　ヘッダ"=>'弐 参'),
                )),
             array('withHeader.ja.iso-2022-jp.csv', 'iso-2022-jp', ',', '"', array(
                    array("あいうえお"=>'一の一',"漢字ヘッダ"=>'一の弐',"漢字　ヘッダ"=>'壱の参'),
                    array("あいうえお"=>'弐 壱',"漢字ヘッダ"=>'弐 弐',"漢字　ヘッダ"=>'弐 参'),
                )),
             array('escapeWithHeader.csv', 'utf-8', ',', '"', array(
                    array('"a'=>'c"c','b"'=>'"'),
                )),
             array('withHeader.utf-16.csv', 'utf-16', ',', '"', array(
                    array('Т'=>'夢','逢'=>'琢'),
                )),
             array('withHeader.utf-16le.csv', 'utf-16', ',', '"', array(
                    array('Т'=>'夢','逢'=>'琢
あ'),
                )),
             array('withHeader.utf-16be.csv', 'utf-16', ',', '"', array(
                    array('Т'=>'夢','逢'=>'琢
琢'),
                )),
            array('withHeaderWithoutEOLatEOF.csv', 'ascii', ',', '"', array(
                    array('header1'=>'value1', 'header2'=>'value2'),
                )),
       );
    }

    protected static function convert_array_encoding(array $array, $to_encoding, $from_encoding = null)
    {
        $ret = array();
        foreach($array AS $key=>$var) {
            $key = mb_convert_encoding($key, $to_encoding, $from_encoding);
            if(is_string($var)) {
                $var = mb_convert_encoding($var, $to_encoding, $from_encoding);
            } elseif(is_array($var)) {
                $var = self::convert_array_encoding($var, $to_encoding, $from_encoding);
            }
            $ret[$key] = $var;
        }
        return $ret;
    }
}
?>
