<?php
	/**
	 * 2009/04/18 LOCAL PHP部勉強会 "openpearを使ってみよう"ねた
	 * あまり真面目なもの作りたくないから役に立たないものを作ってみる
	 * つうかすげえ適当 たぶん使えない
	 * @access public
	 * @author Shu Sawada (luna@lunanet.gr.jp)
	 * @create 2009/04/18
	**/


	/**
	 * 文字列を入力されたらモールス信号で返すよ！
	 * @access public
	 * @param String	$str	入力文字列
	 * @param String	$encoding	入力文字列の文字コード指定 省略時 auto
	 * @param String	$long	モールス信号の長音を何で表現するか
	 * @param String	$short	モールス信号の短音を何で表現するか
	 * @return mixed	変換結果 変換失敗の場合はfalseを返す
	**/
	function test_MorseSignalConverter( $str, $encoding = 'auto', $long = '－', $short = '・' ) {

		//変換テーブルのセットアップ
		$table = array(
					'eng' => array(
							//文字
							'a' => '01', 'b' => '1000', 'c' => '1010', 'd' => '100', 'e' => '0', 'f' => '0010', 
							'g' => '110', 'h' => '0000', 'i' => '00', 'j' => '0111', 'k' => '101', 'l' => '0100',
							'm' => '11', 'n' => '10', 'o' => '111', 'p' => '0110', 'q' => '1101', 'r' => '010',
							's' => '000', 't' => '1', 'u' => '001', 'v' => '0001', 'w' => '011', 'x' => '1001',
							'y' => '1011', 'z' => '1100',
							//記号
							'.' => '010101', ',' => '110011', ':' => '111000', '?' => '001100', '\'' => '011110',
							'-' => '100001', '(' => '10110', ')' => '101101', '/' => '10010', '=' => '10001', 
							'+' => '01010', '"' => '010010', '@' => '011010',
							//'(かける記号) => '1001'
						),
					'numeric' => array(
							'1' => '01111', '2' => '00111', '3' => '00011', '4' => '00001', '5' => '00000',
							'6' => '10000', '7' => '11000', '8' => '11100', '9' => '11110', '0' => '11111',
						),
					'kana' => array(
							'ア' => '11011', 'イ' => '01', 'ウ' => '001', 'エ' => '10111', 'オ' => '01000',
							'カ' => '0100', 'キ' => '10100', 'ク' => '0001', 'ケ' => '1011', 'コ' => '1111',
							'サ' => '10101', 'シ' => '11010', 'ス' => '11101', 'セ' => '01110', 'ソ' => '1110',
							'タ' => '10', 'チ' => '0010', 'ツ' => '0110', 'テ' => '01011', 'ト' => '00100',
							'ナ' => '010', 'ニ' => '1010', 'ヌ' => '0000', 'ネ' => '1101', 'ノ' => '0011',
							'ハ' => '1000', 'ヒ' => '11001', 'フ' => '1100', 'ヘ' => '0', 'ホ' => '100',
							'マ' => '1001', 'ミ' => '00101', 'ム' => '1', 'メ' => '10001', 'モ' => '10010',
							'ヤ' => '011', 'ユ' => '10011', 'ヨ' => '11',
							'ラ' => '000', 'リ' => '110', 'ル' => '10110', 'レ' => '111', 'ロ' => '0101',
							'ワ' => '101', 'ヲ' => '0111', 'ン' => '01010',
							//特殊なやつ
							'、' => '010101', 'ー' => '01101',
							'dakuten' => '00', 'handakuten' => '00110'
						),
					);

		$length = mb_strlen( $str, $encoding );
		if( $encoding != "auto" ) {
			mb_regex_encoding( $encoding );
		}

		//メインループ
		for( $i=0, $mstr='', $isEng=0, $isKana=0 ; $i < $length ; $i++ ) {
			$tmp = mb_substr( $str, $i, 1, $encoding );

			//文字コード判定
			if( preg_match( '/^[a-zA-Z\.\,\:\?\'\-\(\)\/\=\+\"\@]+$/', $tmp ) ) {	//微妙だこの書き方 欧文の場合
				$code = $table['eng'][strtolower($tmp)];
				$isEng = 1;
			}
			else if( preg_match( '/^[0-9]+$/', $tmp) ) {	//数値の場合
				$code = $table['numeric'][$tmp];
			}
			else if( mb_ereg( '^[ア-ン、ー]+$', mb_convert_kana($tmp, 'sKC' ) ) ) {	//和文の場合
				$code = $table['kana'][mb_convert_kana($tmp, 'sKC')];
				$isKana = 1;
			} else if( $tmp != ' ' ){
				//半角スペースはそのまま通す 知らない文字の場合はエラー
				// todo: このままじゃカタカナの濁点・半濁点が処理できてない
				echo "unknown string:";
				var_dump($tmp);
				return false;
			}

			//和文・欧文が混じったらエラーにする
			//(和文と欧文モールスは被ってる。たとえば、イとＡは同じトンツー
			if( $isEng && $isKana ) {
				return false;
			}

			//短点・頂点を指定されたものに置換して追加
			$mstr .= str_replace( '1', $long, str_replace( '0', $short, $code ) ) . " ";
		}

		return $mstr;
	}
?>
