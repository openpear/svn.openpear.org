* 概要
モバイルでよく見る「絵文字」を中心とした、特殊文字を扱うライブラリ。

現在絶賛開発中。
ファイルができたり消えたりします。

構成も実装もモリモリ変えるよ！下手に手をつけてもイラっとしてすぐ戻すかもよ！

** 注：このライブラリのtrunkは、ファイル構成から何からごっそり変更中です。動かないので気をつけてね＞＜
そのうち、branchに旧バージョン突っ込みます。

* 目指すところ
計画としては、

+ 絵文字データベース展開の負荷減少およびDBオブジェクト切り替え実装
+ 絵文字判別/変換ルーチンのIteratorオブジェクト化・文字コード依存部分の疎結合化

を考えて、がっつり書き変えています。

1は、すでに自社で絵文字のマッピングDBを持ってる！という人が独自に自社用DBアクセサをかいてくれれば、そのDBを絵文字変換に利用できるように、と思って作っています。
また、絵文字データを毎回json呼び出ししたり、置換時に毎回packしたりするのではなく、一番最初に全部バイナリ化/オブジェクト展開してそれをシリアライズcacheしてどこかに格納しておくことで、できるだけバイナリ<->文字列の変換負荷を減らして、高速化を図るつもりです。

2は、現行verのSJIS/UTF8/JISおよび各キャリアにべったりの状態を回避し、バイナリ分析のルーチンを外出しすることで拡張性が高まればいいかな、とかキャリアが急に増えても対応しやすいように、と考えて作ってます。

* 開発の現状
2に関しては、テストはまだだけどひとまずベースは完成してます。現状だと、毎回packをする方式を抜け出せないので、そこは1が完成したのちに再度修正する感じになりそうです。

1の方が、Valueオブジェクトをどう実装するかがすごく難しくて、いまいち進まない感じでいます。。。
相手のデータ形式に依存せず、DBコネクション部分を切り替える際に余計な制約を与えずに済むようにするにはどうしたらーとか、いまいち悩みどころ。。
こっちは、これまでのロジックから３足飛びぐらいで変更がかかってしまっているので、もしかしたら一度あきらめて中間的な妥協コードを作成して、次のバージョンでまたがっつり変更する、という落ちにになるかもしれませんｗ


さぁ！というわけで現在開発者を募集しています！ｗｗｗｗｗ