    第1章 Cassis Orange の紹介

■1.1. 概要

    Cassis Orange（以下「casora」と呼ぶ) は中品質なオープンソースのフレームワークです。 
    WebアプリケーションやWebサービスを PHP で開発するために作成されました。

    素人が書いたコードなので、特に難しい処理はしておらず、
    PHP初心者でも簡単に扱えて、簡単に改造できます。

    某PHPフレームワーク、「●aple」と「●end Framework」をリスペクトしています。
    ただし、バグの少なさはリスペクトできていません。

    まだまだ発展途上なので、ご使用はオススメしません。


■1.2. インストール

    「casora」は PHP 5 のオブジェクト指向機能を使用しており、
     PHP 5 以降でないと動作しません。

    適切な PHP 環境が用意できれば、次は 「casora」 を取得します。 
    これは、以下のいずれかの方法で取得することができます。 

        ・最新の安定版をダウンロードする。
         このバージョンは .tar.gz の形式で公開されており、
        「casora」をはじめて使う人におすすめです。 

            http://cassisorange.com/download.html

        ・最新のスナップショットをダウンロードする。 
        最先端の機能を試してみたいという勇気ある人たちのために、 
        「casora」の最新の開発版のスナップショットをたまに更新しています。 

            http://cassisorange.com/svn/

    ※「casora」の各コンポーネントは疎結合で、 
    必要に応じて特定のコンポーネントのみを使用するようにしたいです。 
    現在は定義した定数をクラス内で使用しているため、依存関係が乱れています。

■1.3. 導入

    最小構成のファイルシステムレイアウトは以下のようになります。

    ※アプリケーション名を「sample」、ページ名を「top」とした場合。

        casora/
        ├─sample/
        │  ├─models/
        │  │  └─Top.class.php
        │  └─views/
        │      └─top.html
        ├─html/
        │  └─index.php
        └─FW/
            ├─Controller.class.php
            ├─Logger.class.php
            ├─Log.php
            └─Log/

	上記の「casora」というディレクトリはプロジェクトに当たるもので、
	その中に存在するアプリケーション（例えば会員登録など）にあたるのは「sample」になります。

    パッケージ化するためには、「casora」ディレクトリ内に集約させることになります。
    （casora・sampleという名前は適宜変更してください）


    アプリケーションのログの保存や、設定ファイルを別ファイルに切り出した場合、
    典型的なレイアウトは、次のようなになります。

        casora/
        ├─config.inc.php
        ├─conf/
        │  └─log.inc.php
        ├─apps/
        │  └─sample/
        │      ├─config.inc.php
        │      ├─html/
        │      │  ├─sample
        │      │  └─.htaccess
        │      ├─logs/（Webアプリケーションが書き込める権限にする）
        │      ├─models/
        │      │  └─Top.class.php
        │      └─views/
        │          └─top.html
        └─lib/
            ├─FW/（casoraフレームワーク）
            │  ├─Controller.class.php（必須）
            │  └─Logger.class.php（必須）
            ├─Log/
            └─Log.php(PEAR)

    ※アプリケーション名を「sample」、ページ名を「top」とした場合。
    ※アプリケーションごとに、ドキュメントルートを分けた構成。

    上記2つの例は、必ず構築しなければいけない構成ではありません。
    定義する定数により構成の変更が可能です。


    各ディレクトリの意味と内容は以下の通りです。

        conf/
            設定ファイル
            各アプリケーション共通で使用するファイル

        lib/
            ライブラリ
            全体で使用するライブラリ

        [apps]/
            アプリケーション
            管理画面、フロントなど必要な分だけ作成する

        [apps]/html/
            各アプリケーションのWebのドキュメントルート

        [apps]/conf/
            設定ファイル
            各アプリケーション共通で使用するファイルを置く

        [apps]/log/
            ログ
            Apacheやロガーで吐き出すログなどを置く。

        [apps]/model/
            モデル
            ページを表示するためのクラスを置く

        [apps]/view/
            ビュー
            テンプレート置き場

        [apps]/config.inc.php
            各アプリケーションの設定ファイル


	とにかく実際に動かしてみたいという場合は、「付録A チュートリアル」を参照してください。
