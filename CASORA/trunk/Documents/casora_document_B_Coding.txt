    付録 B「CassisOrange Framework」 PHP 標準コーディング規約

■B.1. 概要

    このドキュメントは、CassisOrange Framework 上で開発を行う開発者 
    (あるいは CassisOrange Framework 開発チーム) のための指針となるものです。

    基本的にはZent Frameworkのコーディング規約に従って欲しいですが、厳密には強制しません。

    とりあえず、できるだけ従って欲しい項目を抜粋したので、以下に転載します。

■B.2. PHP ファイルの書式

■B.2.2. 字下げ

    字下げは空白 4 文字で行います。タブ文字は使用しません。

■B.2.3. 1 行の長さ

    1 行の長さを 80 文字までにすることを目指しましょう。すなわち、
    コードの長さを現実的な範囲で 80 文字までにおさめるよう努力すべきです。
    しかしながら、少々長くなってしまうことは許されます。
    PHP コードの行の長さは、最大 120 文字までにするようにしましょう。 

■B.2.4. 行末

    行末の扱いは、標準的な Unix テキストファイルの方式にあわせます。
    行末は、ラインフィード (LF) のみにしなければなりません。
    この文字のコードは 10、あるいは 16 進形式で 0x0A となります。

    マッキントッシュのように、キャリッジリターン (CR) を使用しないでください (コードは 0x0D です)。

    Windows のように、キャリッジリターンとラインフィードの組み合わせ (CRLF) を使用しないでください (コードは 0x0D, 0x0A です)。 

■B.3.4. 関数およびメソッド

    関数名に含めることができるのは英数字のみです。 アンダースコアを使用してはいけません。
    数字を含めることは可能ですが、お勧めしません。

    関数名は小文字で始めなければなりません。 関数名が複数の単語で構成されている場合は、
    各単語の最初の文字を大文字にしなければなりません。
    一般に、このフォーマットは "camelCaps" と呼ばれています。

    関数名は省略しすぎないようにしましょう。
    コードを理解しやすくするため、 現実的な範囲でできるだけ詳細な名前をつけるようにしましょう。 


■B.4.3. 配列
■B.4.3.1. 数値添字の配列

    array を使用して数値添字の配列を宣言する場合は、 コードを読みやすくするため、
    要素を区切るカンマの後にスペースを入れなければなりません。 

        $sampleArray = array(1, 2, 3, 'Cassis', 'Orange');

■B.4.3.2. 連想配列

    連想配列を array で宣言する場合には、 適宜改行をいれて複数行で宣言するようにしましょう。
    その場合は、 2 行目以降の行頭などにスペースを入れ、 キーと値の位置がそれぞれ揃うようにしなければなりません。 

        $sampleArray = array('firstKey'  => 'firstValue',
                             'secondKey' => 'secondValue');

■B.4.4. クラス
■B.4.4.1. クラス宣言

    クラス宣言は、以下の規約に従わなければなりません。

    開始波括弧は常にクラス名の下に書かなければなりません ("one true brace" 形式)。

    PHPDocumentor の標準形式のドキュメントブロックがなければなりません。

    クラス内のコードは、すべて空白 4 文字で字下げします。

    ひとつの PHP ファイルにはクラス定義をひとつだけ含めるようにします。

    クラスファイルの中にクラス以外のコードを追加することもできますが、
    お勧めしません。このような場合には、クラス定義とその他のコードの間に 空行を 2 行挿入しなければなりません。

    これらの条件を満たすクラス宣言の例です。 

        /**
         * これがドキュメントブロックです
         */
        class SampleClass
        {
            // クラスのすべての内容は、
            // 空白 4 文字の字下げを使用します。
        }


■B.4.4.2. クラスのメンバ変数

    メンバ変数は、以下の命名規約に従わなければなりません。

    クラス内で宣言されるすべての変数は、クラスの最初、 つまりメソッド宣言の始まる前になければなりません。

    var は使用してはいけません。メンバ変数は、常に private、
    protected あるいは public を使用して宣言してください。
    変数を public にして直接アクセスすることも可能ですが、推奨されません。
    代わりにアクセサメソッド (set/get) を使用してください。

■B.4.5. 関数およびメソッド
■B.4.5.1. 関数およびメソッドの宣言

    関数は、以下の命名規約に従わなければなりません。

    クラス内のメソッドは、必ず private、protected あるいは public のいずれかを使用して宣言しなければなりません。

    クラスと同様、 開始波括弧は常に関数名の下に書かなければなりません ("one true brace" 形式)。
    関数名と引数指定の開始括弧の間には、空白を入れません。

    グローバルスコープの関数は、できるだけ使用しないでください。

    これらの条件を満たす、クラス内での関数定義の例です。 

        /**
         * これがドキュメントブロックです
         */
        class Foo
        {
            /**
             * Documentation Block Here
             */
            public function bar()
            {
                // 関数のすべての内容は、
                // 空白 4 文字の字下げを使用します。
            }
        }


    返り値は括弧で囲んではいけません。これは可読性を下げますし、
    将来そのメソッドが参照を返すようになった場合にコードが壊れてしまいます。 

        /**
         * これがドキュメントブロックです
         */
        class Foo
        {
            /**
             * 間違いです
             */
            public function bar()
            {
                return($this->bar);
            }

            /**
             * 正しい形式です
             */
            public function bar()
            {
                return $this->bar;
            }
        }

■B.4.5.2. 関数およびメソッドの使用法

    関数の引数を指定する際は、引数を区切るカンマの後に空白をひとつ入れます。
    例えば 3 つの引数を受け取る関数をコールする場合の例は、 以下のようになります。 

        threeArguments(1, 2, 3);

■B.4.6. 制御構造
■B.4.6.1. If / Else / Elseif

    if および elseif 系の制御構造では、 条件を指定する括弧の前に空白をひとつ入れなければなりません。
    また、条件指定の括弧を閉じた後にも空白をひとつ入れなければなりません。

    括弧で囲まれた条件文の中では、演算子の前後にも空白をいれなければなりません。 

    開始波括弧は、条件文と同じ行に記述します。 終了波括弧は、常に改行してそれのみで記述します。
    波括弧の中では、空白 4 文字の字下げを使用します。 

        if ($a != 2) {
            $a = 2;
        }


    "elseif" あるいは "else" を含む "if" 文の場合の決まりは、 以下の例のような書式になります。 

        if ($a != 2) {
            $a = 2;
        } else {
           $a = 7;
        }


        if ($a != 2) {
            $a = 2;
        } elseif ($a == 3) {
           $a = 4;
        } else {
           $a = 7;
        }

